#
# Signals:
#

#only some signals are defined for you already
#You must add whatever microcode signals you use
#
SIG   BCpc BCmem BCz BCreg BCsp BCs BCr
SIG   MARen PCen IRen Zen REGen MEMen Sen Ren CMPen NCMPen
SIG   push pop
SIG   aluinc aludec aluadd alusub alumul aludiv aluand aluor aluxor alueq alugr
SIG   aluz   alushl alushr
SIG   id2uip gofetch 
SIG   halt


#
#
# Fetch cycle begins at uip 0
#

fetch:
BCpc MARen
BCmem IRen
BCpc aluinc Zen
BCz PCen
id2uip

#
# DO NOT delete this UD_fault microcode
# it will be invoked if the opcode in the IR is illegal
# the mkrom program expects this to be defined
#
UD_fault:
halt 

#Microcode for the HALT instruction
HALT  OPCODE   00_00_00_00
halt 

#Microcode for the NOP instruction
NOP   OPCODE   00_00_00_01
gofetch


# Load the following immediate value into the specified register.
# Arguments:
#  0 : destination register
#  1 : immediate value
LDI OPCODE 00_11_10_??
BCpc  MARen       # Point at the argument
BCmem REGen       # Load the argument value into the target register
BCpc  aluinc Zen  # Skip the argument
BCz   PCen
gofetch


# Load the contents of the argument memory address into the target register
# Arguments:
#  0 : destination register
#  1 : memory address
LD OPCODE 00_10_10_??
BCpc  MARen       # Point at the argument
BCmem Sen         # Cache the argument in the S register
BCs   MARen       # Load the argument as a memory address
BCmem REGen       # Load the contents of that memory address into the register
BCpc  aluinc Zen  # Skip the argument
BCz   PCen
gofetch


RLD OPCODE 10_11_10_??
BCpc   MARen      # Point at the argument
BCmem  Ren        # Load the argument into the register pointer
BCr    MARen      # Use the contents of the argument register as an address
BCmem  REGen      # Load the contents of memory into the target register
BCpc   aluinc Zen # Skip the argument
BCz    PCen
gofetch


# Load the contents of the argument register into the target register.
# Arguments:
#  0 : source register
MOV OPCODE 00_11_11_??
BCpc  MARen       # Point at the argument
BCmem Ren         # Load the argument into the register pointer
BCr   REGen       # Load the contents of the argument reg into the target reg
BCpc  aluinc Zen  # Skip the argument
BCz   PCen
gofetch


# Store the contents of the specified register at the following memory location
# Arguments:
#  0 : memory address
STORE OPCODE 00_10_11_??
BCpc  MARen       # Point at the argument
BCmem Sen         # Cache the argument in the S register
BCs   MARen       # Use the argument as a memory pointer
BCreg MEMen       # Store the contents of the target register into memory
BCpc  aluinc Zen  # Skip the argument
BCz   PCen
gofetch


RSTORE OPCODE 10_10_11_??
BCpc  MARen       # Point at the argument
BCmem Ren         # Load the argument into the register pointer
BCreg MARen       # Use the target register as a memory pointer
BCr   MEMen       # Store the contents of the argument register
BCpc  aluinc Zen  # Skip the argument
BCz   PCen
gofetch


# Increment the contents of the target register
INC OPCODE 00_10_00_??
BCreg aluinc Zen
BCz   REGen
gofetch


# Decrement the contents of the target register
DEC OPCODE 00_10_01_??
BCreg aludec Zen
BCz   REGen
gofetch


# Add the contents of the argument register to the target register,
# storing the result in the target register.
# Arguments:
#  0 : RHS register
ADD OPCODE 00_00_01_??
BCpc  MARen       # Point at the argument
BCmem Ren         # Load the argument register ino the register pointer
BCr   Sen         # Load the contents of the pointed to register as the summand
BCreg aluadd Zen  # Add contents of the registers together
BCz   REGen       # Put the result back in the target register
BCpc  aluinc Zen  # Skip the argument
BCz   PCen
gofetch


# Subtract the contents of the argument register from the target register,
# storing the result in the target register.
# Arguments:
#  0 : RHS register
SUB OPCODE 00_00_10_??
BCpc  MARen       # Point at the argument
BCmem Ren         # Load the argument register ino the register pointer
BCr   Sen         # Load the contents of the pointed to register as the summand
BCreg alusub Zen  # Subtract the summand from the target register
BCz   REGen       # Put the result back in the target register
BCpc  aluinc Zen  # Skip the argument
BCz   PCen
gofetch


# Multiply the contents of the argument register by the target register,
# storing the result in the target register.
# Arguments:
#  0 : RHS register
MUL OPCODE 00_00_11_??
BCpc  MARen       # Point at the argument
BCmem Ren         # Load the argument register ino the register pointer
BCr   Sen         # Load the contents of the pointed to register as the RHS
BCreg alumul Zen  # Multiply the target register by the RHS
BCz   REGen       # Put the result back in the target register
BCpc  aluinc Zen  # Skip the argument
BCz   PCen
gofetch


# Divide the target register by the contents of the argument register,
# storing the result in the target register.
# Arguments:
#  0 : RHS register
DIV OPCODE 00_01_00_??
BCpc  MARen       # Point at the argument
BCmem Ren         # Load the argument register ino the register pointer
BCr   Sen         # Load the contents of the argument register as the RHS
BCreg aludiv Zen  # Divide the target register by the RHS
BCz   REGen       # Put the result back in the target register
BCpc  aluinc Zen  # Skip the argument
BCz   PCen
gofetch


# Perform a bitwise AND between the target register and argument register,
# storing the result in the target register.
AND OPCODE 00_01_01_??
BCpc  MARen       # Point at the argument
BCmem Ren         # Load the argument register into the register pointer
BCr   Sen         # Load the contents of the argument register as the RHS
BCreg aluand Zen  # AND the registers together
BCz   REGen       # Store the result in the target register
BCpc  aluinc Zen  # Skip the argument
BCz   PCen
gofetch


# Perform a bitwise OR between the target register and argument register,
# storing the result in the target register.
OR OPCODE 00_01_10_??
BCpc  MARen       # Point at the argument
BCmem Ren         # Load the argument register into the register pointer
BCr   Sen         # Load the contents of the argument register as the RHS
BCreg aluor  Zen  # OR the registers together
BCz   REGen       # Store the result in the target register
BCpc  aluinc Zen  # Skip the argument
BCz   PCen
gofetch


# Perform a bitwise XOR between the target register and argument register,
# storing the result in the target register.
XOR OPCODE 00_01_11_??
BCpc  MARen       # Point at the argument
BCmem Ren         # Load the argument register into the register pointer
BCr   Sen         # Load the contents of the argument register as the RHS
BCreg aluxor Zen  # OR the registers together
BCz   REGen       # Store the result in the target register
BCpc  aluinc Zen  # Skip the argument
BCz   PCen
gofetch


# Shift the contents of the target register left by a number of bits given by
# the contents of the argument register.
# Arguments:
#  0 : target register
#  1 : bit count register
SHL OPCODE 01_10_11_??
BCpc  MARen       # Point at the argument
BCmem Ren         # Load the argument register into the register pointer
BCr   Sen         # Load the argument register into the summand register
BCreg alushl Zen  # Shift the target register left by the summand contents
BCz   REGen       # Store the result back into the target register
BCpc  aluinc Zen  # Skip the argument
BCz   PCen
gofetch


# Shift the contents of the target register left by a number of bits given by
# the contents of the argument register.
# Arguments:
#  0 : target register
#  1 : bit count register
SHR OPCODE 01_11_00_??
BCpc  MARen       # Point at the argument
BCmem Ren         # Load the argument register into the register pointer
BCr   Sen         # Load the argument register into the summand register
BCreg alushr Zen  # Shift the target register right by the summand contents
BCz   REGen       # Store the result back into the target register
BCpc  aluinc Zen  # Skip the argument
BCz   PCen
gofetch


# Set PC to the argument address
# Arguments:
#  0 : destination address
JMP OPCODE 00_00_00_11
BCpc MARen
BCmem PCen
gofetch


# Jump to the argument address if the argument register is equal to the 
# target register.
# Arguments:
#  0 : RHS register
#  1 : jump address
JE OPCODE 11_00_01_??
BCpc MARen        # Point at the argument
BCmem Ren         # Load the argument register into the register pointer
BCr Sen           # Load the contents of the argument register as the summand
BCpc aluinc Zen   # Skip to the next argument, the jump address
BCz PCen
BCpc MARen        # Point at the jump address argument
BCmem CMPen       # Load the PASS condition register with the jump address
BCpc aluinc Zen   # Skip to the next instruction
BCz NCMPen        # Load the FAIL condition register with the next instruction
BCreg alueq Zen   # Compare the target register to the summand
BCz PCen          # Jump to the result of the comparison
                  # If EQ (pass) then this is the jump address
                  # If NEQ (fail) then this is the next instruction
gofetch


# Jump to the argument address if the argument register is not equal to the
# target register.
# Arguments:
#  0 : RHS register
#  1 : jump address
JNE OPCODE 11_00_10_??
BCpc MARen        # Point at the argument
BCmem Ren         # Load the argument register into the register pointer
BCr   Sen         # Load the contents of the argument register as the summand
BCpc  aluinc Zen  # Skip to the next argument, the jump address
BCz   PCen        
BCpc  MARen       # Point at the jump address argument
BCmem NCMPen      # Load the NEQ condition register with the jump address
BCpc  aluinc Zen  # Skip to the next instruction
BCz   CMPen       # Load the EQ condition register with the next instruction
BCreg alueq Zen   # Do the comparison
BCz   PCen        # Jump to the result of the comparison
                  # If EQ (pass) then this is the next instruction
                  # if NEQ (fail) then this is the jump address
gofetch


# Jump to the argument address if the target register is greater than the 
# argument register
# Arguments:
#  0 : RHS register
#  1 : jump address
JG OPCODE 11_00_11_??
BCpc MARen        # Point at the argument
BCmem Ren         # Load the argument register into the register pointer
BCr Sen           # Load the contents of the argument register as the summand
BCpc aluinc Zen   # Skip to the next argument, the jump address
BCz PCen
BCpc MARen        # Point at the jump address argument
BCmem CMPen       # Load the PASS condition register with the jump address
BCpc aluinc Zen   # Skip to the next instruction
BCz NCMPen        # Load the FAIL condition register with the next instruction
BCreg alugr Zen   # Compare the target register to the summand
BCz PCen          # Jump to the result of the comparison
                  # If DBus > S (pass) then this is the jump address
                  # If DBus <= S (fail) then this is the next instruction
gofetch


# Jump to the argument address if the target register is equal to zero
# Arguments:
#  0 : jump address
JZ OPCODE 11_01_00_??
BCpc  MARen       # Point at the argument jump address
BCmem CMPen       # Load the jump address into the ZERO condition
BCpc  aluinc Zen  # Skip to the next instruction
BCz   NCMPen      # Load the next instruction addr into the NOT ZERO condition
BCreg aluz   Zen  # Compare the contents of the target register with zero
BCz   PCen        # Jump to the resulting address
                  # If Z == 0 then this is the jump address
                  # If Z != 0 then this is the next instruction
gofetch


# Jump to the argument address if the target register is equal to zero
# Arguments:
#  0 : jump address
JNZ OPCODE 11_10_01_??
BCpc  MARen       # Point at the argument jump address
BCmem NCMPen      # Load the jump address into the ZERO condition
BCpc  aluinc Zen  # Skip to the next instruction
BCz   CMPen       # Load the next instruction addr into the NOT ZERO condition
BCreg aluz   Zen  # Compare the contents of the target register with zero
BCz   PCen        # Jump to the resulting address
                  # If Z != 0 then this is the jump address
                  # If Z == 0 then this is the next instruction
gofetch


# Push the next instruction address to the stack and jump to the argument addr
# Arguments:
#  0 : jump address
CALL OPCODE 10_00_00_00
BCsp MARen        # Point to the top of the stack
BCpc aluinc Zen   # Set Z to be the next instruction
BCz MEMen         # Store the next instruction address onto the stack
push              # Push the stack head up
BCpc MARen        # Point at the argument
BCmem PCen        # Jump to the address stored at the argument
gofetch


# Pop an instruction address from the stack and jump to it
RET OPCODE 10_00_00_01
pop               # Pop back down to the last stack entry
BCsp MARen        # Point at the last stack entry
BCmem PCen        # Load the stored address into the current PC
gofetch


# Push the contents of the target register to the hardware stack
PUSH OPCODE 10_00_01_??
BCsp  MARen       # Point to the top of the stack
BCreg MEMen       # Store the target register on the stack
push              # Increment the stack pointer
gofetch


# Pop the top of the hardware stack into the target register
POP OPCODE 10_00_10_??
pop               # Decrement the stack pointer
BCsp  MARen       # Point at the top of the stack
BCmem REGen       # Load the top of the stack into the target register
gofetch


# Add the following immediate value to the specified register, storing the
# result in that register.
#ADDI OPCODE 00_01_??
#BCreg Sen        # Present the contents of the register to the ALU
#BCpc MARen       # Point at the argument
#BCmem aluadd Zen # get the immediate value from memory and add it to S
#BCz REGen        # Store the result back in the register
#BCpc aluinc Zen  # Skip the argument
#BCz PCen
#gofetch

# Add the contents located at the following memory address to the specified
# register, storing the result in that register.
#ADDM OPCODE 00_11_??
#BCpc MARen       # Point at the argument
#BCmem MARen      # Fetch the memory address specified in the argument
#BCmem Sen        # Fetch the memory contents into the S register
#BCreg aluadd Zen # Add the specified register to the S register
#BCz REGen        # Store the result back into the specified register
#BCpc aluinc Zen  # Skip the argument
#BCz PCen
#gofetch

#SUBI OPCODE 00_11_??
#BCreg Sen        # Load the contents of the target register as the summand
#BCpc MARen       # Point at the argument
#BCmem alusub Zen # Add the argument to the summand
#BCz REGen        # Load the result into the target register
#BCpc aluinc Zen  # Skip the argument
#BCz PCen
#gofetch
